import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, SimpleChanges } from '@angular/core';
import { Images } from './interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class CarouselComponent implements OnDestroy {
    private elementRef;
    private ref;
    carousel: any;
    container: any;
    utils: any;
    cells: any;
    slide: any;
    _id: string;
    _images: Images;
    touches: any;
    landscapeMode: any;
    minTimeout: number;
    isVideoPlaying: boolean;
    _isCounter: boolean;
    _width: number;
    _cellWidth: number | '100%';
    _loop: boolean;
    _lightDOM: boolean;
    isMoving: boolean;
    isNgContent: boolean;
    cellLength: number;
    dotsArr: any;
    get isContainerLocked(): any;
    get slideCounter(): any;
    get lapCounter(): any;
    get isLandscape(): boolean;
    get isSafari(): any;
    get counter(): string;
    get cellsElement(): any;
    get isArrows(): boolean;
    get isCounter(): boolean;
    get activeDotIndex(): number;
    get cellLimit(): any;
    events: EventEmitter<any>;
    id: number;
    height: number;
    width: number;
    autoplay: boolean;
    autoplayInterval: number;
    pauseOnHover: boolean;
    dots: boolean;
    borderRadius: number;
    margin: number;
    objectFit: 'contain' | 'cover' | 'none';
    minSwipeDistance: number;
    transitionDuration: number;
    transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear';
    videoProperties: any;
    counterSeparator: string;
    overflowCellsLimit: number;
    listeners: 'auto' | 'mouse and touch';
    cellsToShow: number;
    cellsToScroll: number;
    freeScroll: boolean;
    arrows: boolean;
    arrowsOutside: boolean;
    arrowsTheme: 'light' | 'dark';
    set images(images: Images & any);
    get images(): Images & any;
    set cellWidth(value: number | '100%');
    set isCounter(value: boolean);
    set loop(value: boolean);
    get loop(): boolean;
    set lightDOM(value: boolean);
    get lightDOM(): boolean;
    hostClassCarousel: boolean;
    hostStyleHeight: string;
    hostStyleWidth: string;
    onWindowResize(event: any): void;
    onMousemove(event: MouseEvent): void;
    onMouseleave(event: MouseEvent): void;
    constructor(elementRef: ElementRef, ref: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    initCarousel(): void;
    detectDomChanges(): void;
    onDomChanges(): void;
    setDimensions(): void;
    getImage(index: any): any;
    handleTouchstart: (event: any) => void;
    handleHorizontalSwipe: (event: any) => void;
    handleTouchend: (event: any) => void;
    handleTap: (event: any) => void;
    handleTransitionendCellContainer(event: any): void;
    toggleVideo(video: any): void;
    getCellWidth(): any;
    next(): void;
    prev(): void;
    isNextArrowDisabled(): any;
    isPrevArrowDisabled(): any;
    getCellLength(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CarouselComponent, "carousel, [carousel]", never, { "height": "height"; "autoplay": "autoplay"; "autoplayInterval": "autoplayInterval"; "pauseOnHover": "pauseOnHover"; "dots": "dots"; "margin": "margin"; "objectFit": "objectFit"; "minSwipeDistance": "minSwipeDistance"; "transitionDuration": "transitionDuration"; "transitionTimingFunction": "transitionTimingFunction"; "counterSeparator": "counterSeparator"; "overflowCellsLimit": "overflowCellsLimit"; "listeners": "listeners"; "cellsToScroll": "cellsToScroll"; "freeScroll": "freeScroll"; "arrows": "arrows"; "arrowsTheme": "arrowsTheme"; "isCounter": "counter"; "images": "images"; "cellWidth": "cellWidth"; "loop": "loop"; "lightDOM": "lightDOM"; "id": "id"; "width": "width"; "borderRadius": "borderRadius"; "videoProperties": "videoProperties"; "cellsToShow": "cellsToShow"; "arrowsOutside": "arrowsOutside"; }, { "events": "events"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNhcm91c2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEltYWdlcyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENhcm91c2VsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgcmVmO1xyXG4gICAgY2Fyb3VzZWw6IGFueTtcclxuICAgIGNvbnRhaW5lcjogYW55O1xyXG4gICAgdXRpbHM6IGFueTtcclxuICAgIGNlbGxzOiBhbnk7XHJcbiAgICBzbGlkZTogYW55O1xyXG4gICAgX2lkOiBzdHJpbmc7XHJcbiAgICBfaW1hZ2VzOiBJbWFnZXM7XHJcbiAgICB0b3VjaGVzOiBhbnk7XHJcbiAgICBsYW5kc2NhcGVNb2RlOiBhbnk7XHJcbiAgICBtaW5UaW1lb3V0OiBudW1iZXI7XHJcbiAgICBpc1ZpZGVvUGxheWluZzogYm9vbGVhbjtcclxuICAgIF9pc0NvdW50ZXI6IGJvb2xlYW47XHJcbiAgICBfd2lkdGg6IG51bWJlcjtcclxuICAgIF9jZWxsV2lkdGg6IG51bWJlciB8ICcxMDAlJztcclxuICAgIF9sb29wOiBib29sZWFuO1xyXG4gICAgX2xpZ2h0RE9NOiBib29sZWFuO1xyXG4gICAgaXNNb3Zpbmc6IGJvb2xlYW47XHJcbiAgICBpc05nQ29udGVudDogYm9vbGVhbjtcclxuICAgIGNlbGxMZW5ndGg6IG51bWJlcjtcclxuICAgIGRvdHNBcnI6IGFueTtcclxuICAgIGdldCBpc0NvbnRhaW5lckxvY2tlZCgpOiBhbnk7XHJcbiAgICBnZXQgc2xpZGVDb3VudGVyKCk6IGFueTtcclxuICAgIGdldCBsYXBDb3VudGVyKCk6IGFueTtcclxuICAgIGdldCBpc0xhbmRzY2FwZSgpOiBib29sZWFuO1xyXG4gICAgZ2V0IGlzU2FmYXJpKCk6IGFueTtcclxuICAgIGdldCBjb3VudGVyKCk6IHN0cmluZztcclxuICAgIGdldCBjZWxsc0VsZW1lbnQoKTogYW55O1xyXG4gICAgZ2V0IGlzQXJyb3dzKCk6IGJvb2xlYW47XHJcbiAgICBnZXQgaXNDb3VudGVyKCk6IGJvb2xlYW47XHJcbiAgICBnZXQgYWN0aXZlRG90SW5kZXgoKTogbnVtYmVyO1xyXG4gICAgZ2V0IGNlbGxMaW1pdCgpOiBhbnk7XHJcbiAgICBldmVudHM6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGF1dG9wbGF5OiBib29sZWFuO1xyXG4gICAgYXV0b3BsYXlJbnRlcnZhbDogbnVtYmVyO1xyXG4gICAgcGF1c2VPbkhvdmVyOiBib29sZWFuO1xyXG4gICAgZG90czogYm9vbGVhbjtcclxuICAgIGJvcmRlclJhZGl1czogbnVtYmVyO1xyXG4gICAgbWFyZ2luOiBudW1iZXI7XHJcbiAgICBvYmplY3RGaXQ6ICdjb250YWluJyB8ICdjb3ZlcicgfCAnbm9uZSc7XHJcbiAgICBtaW5Td2lwZURpc3RhbmNlOiBudW1iZXI7XHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IG51bWJlcjtcclxuICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogJ2Vhc2UnIHwgJ2Vhc2UtaW4nIHwgJ2Vhc2Utb3V0JyB8ICdlYXNlLWluLW91dCcgfCAnbGluZWFyJztcclxuICAgIHZpZGVvUHJvcGVydGllczogYW55O1xyXG4gICAgY291bnRlclNlcGFyYXRvcjogc3RyaW5nO1xyXG4gICAgb3ZlcmZsb3dDZWxsc0xpbWl0OiBudW1iZXI7XHJcbiAgICBsaXN0ZW5lcnM6ICdhdXRvJyB8ICdtb3VzZSBhbmQgdG91Y2gnO1xyXG4gICAgY2VsbHNUb1Nob3c6IG51bWJlcjtcclxuICAgIGNlbGxzVG9TY3JvbGw6IG51bWJlcjtcclxuICAgIGZyZWVTY3JvbGw6IGJvb2xlYW47XHJcbiAgICBhcnJvd3M6IGJvb2xlYW47XHJcbiAgICBhcnJvd3NPdXRzaWRlOiBib29sZWFuO1xyXG4gICAgYXJyb3dzVGhlbWU6ICdsaWdodCcgfCAnZGFyayc7XHJcbiAgICBzZXQgaW1hZ2VzKGltYWdlczogSW1hZ2VzICYgYW55KTtcclxuICAgIGdldCBpbWFnZXMoKTogSW1hZ2VzICYgYW55O1xyXG4gICAgc2V0IGNlbGxXaWR0aCh2YWx1ZTogbnVtYmVyIHwgJzEwMCUnKTtcclxuICAgIHNldCBpc0NvdW50ZXIodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgc2V0IGxvb3AodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgZ2V0IGxvb3AoKTogYm9vbGVhbjtcclxuICAgIHNldCBsaWdodERPTSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgbGlnaHRET00oKTogYm9vbGVhbjtcclxuICAgIGhvc3RDbGFzc0Nhcm91c2VsOiBib29sZWFuO1xyXG4gICAgaG9zdFN0eWxlSGVpZ2h0OiBzdHJpbmc7XHJcbiAgICBob3N0U3R5bGVXaWR0aDogc3RyaW5nO1xyXG4gICAgb25XaW5kb3dSZXNpemUoZXZlbnQ6IGFueSk6IHZvaWQ7XHJcbiAgICBvbk1vdXNlbW92ZShldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XHJcbiAgICBvbk1vdXNlbGVhdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBpbml0Q2Fyb3VzZWwoKTogdm9pZDtcclxuICAgIGRldGVjdERvbUNoYW5nZXMoKTogdm9pZDtcclxuICAgIG9uRG9tQ2hhbmdlcygpOiB2b2lkO1xyXG4gICAgc2V0RGltZW5zaW9ucygpOiB2b2lkO1xyXG4gICAgZ2V0SW1hZ2UoaW5kZXg6IGFueSk6IGFueTtcclxuICAgIGhhbmRsZVRvdWNoc3RhcnQ6IChldmVudDogYW55KSA9PiB2b2lkO1xyXG4gICAgaGFuZGxlSG9yaXpvbnRhbFN3aXBlOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICAgIGhhbmRsZVRvdWNoZW5kOiAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuICAgIGhhbmRsZVRhcDogKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcbiAgICBoYW5kbGVUcmFuc2l0aW9uZW5kQ2VsbENvbnRhaW5lcihldmVudDogYW55KTogdm9pZDtcclxuICAgIHRvZ2dsZVZpZGVvKHZpZGVvOiBhbnkpOiB2b2lkO1xyXG4gICAgZ2V0Q2VsbFdpZHRoKCk6IGFueTtcclxuICAgIG5leHQoKTogdm9pZDtcclxuICAgIHByZXYoKTogdm9pZDtcclxuICAgIGlzTmV4dEFycm93RGlzYWJsZWQoKTogYW55O1xyXG4gICAgaXNQcmV2QXJyb3dEaXNhYmxlZCgpOiBhbnk7XHJcbiAgICBnZXRDZWxsTGVuZ3RoKCk6IGFueTtcclxufVxyXG4iXX0=