/**
 * @fileoverview added by tsickle
 * Generated from: pipes/storageUrl.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AsyncPipe } from '@angular/common';
import { ChangeDetectorRef, NgModule, Pipe } from '@angular/core';
import { AngularFireStorage } from '../storage';
/**
 * to be used with in combination with | async
 */
import * as ɵngcc0 from '@angular/core';
export class GetDownloadURLPipe {
    /**
     * @param {?} storage
     * @param {?} cdr
     */
    constructor(storage, cdr) {
        this.storage = storage;
        this.asyncPipe = new AsyncPipe(cdr);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    transform(path) {
        if (path !== this.path) {
            this.path = path;
            this.downloadUrl$ = this.storage.ref(path).getDownloadURL();
        }
        return this.asyncPipe.transform(this.downloadUrl$);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
}
GetDownloadURLPipe.ɵfac = function GetDownloadURLPipe_Factory(t) { return new (t || GetDownloadURLPipe)(ɵngcc0.ɵɵdirectiveInject(AngularFireStorage), ɵngcc0.ɵɵinjectPipeChangeDetectorRef()); };
GetDownloadURLPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "getDownloadURL", type: GetDownloadURLPipe, pure: false });
/** @nocollapse */
GetDownloadURLPipe.ctorParameters = () => [
    { type: AngularFireStorage },
    { type: ChangeDetectorRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipe, [{
        type: Pipe,
        args: [{
                name: 'getDownloadURL',
                pure: false
            }]
    }], function () { return [{ type: AngularFireStorage }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.asyncPipe;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.path;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.downloadUrl$;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.storage;
}
export class GetDownloadURLPipeModule {
}
GetDownloadURLPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GetDownloadURLPipeModule });
GetDownloadURLPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GetDownloadURLPipeModule_Factory(t) { return new (t || GetDownloadURLPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GetDownloadURLPipeModule, { declarations: [GetDownloadURLPipe], exports: [GetDownloadURLPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GetDownloadURLPipe],
                exports: [GetDownloadURLPipe]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZVVybC5waXBlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9zdG9yYWdlL3BpcGVzL3N0b3JhZ2VVcmwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFhLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2hEO0FBQ0c7QUFBK0M7O0FBS2xELE1BQU0sT0FBTyxrQkFBa0I7QUFBRztBQUFRO0FBQTBCO0FBRWpEO0FBQVEsSUFJekIsWUFBb0IsT0FBMkIsRUFBRSxHQUFzQjtBQUN6RSxRQURzQixZQUFPLEdBQVAsT0FBTyxDQUFvQjtBQUFDLFFBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEMsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUNMO0FBQW1CO0FBQVEsSUFEM0IsU0FBUyxDQUFDLElBQVk7QUFDeEIsUUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQzVCLFlBQU0sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdkIsWUFBTSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBQ2xFLFNBQUs7QUFDTCxRQUFJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3ZELElBQUUsQ0FBQztBQUNIO0FBQ087QUFDQztBQUFRLElBRGQsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNqQyxJQUFFLENBQUM7QUFDSDs4Q0F6QkMsSUFBSSxTQUFDLGtCQUNKLElBQUksRUFBRSxnQkFBZ0Isa0JBQ3RCLElBQUksRUFBRSxLQUFLLGVBQ1o7a0hBQ0k7QUFBQztBQUFtQjtBQUE0QyxZQVA1RCxrQkFBa0I7QUFBSSxZQUZ0QixpQkFBaUI7QUFBRzs7Ozs7OztnSEFBRTtBQUFDO0FBQWE7QUFBUTtBQUFpQjtBQUFnQjtBQUNyRixJQVVDLHVDQUE2QjtBQUMvQjtBQUFRO0FBQ1A7QUFBZ0I7QUFBUSxJQUR2QixrQ0FBcUI7QUFDdkI7QUFBUTtBQUFpQjtBQUN6QjtBQUNPLElBRkwsMENBQXNDO0FBQ3hDO0FBQ087QUFBaUI7QUFBZ0I7QUFBUSxJQUFsQyxxQ0FBbUM7QUFBQztBQXNCbEQsTUFBTSxPQUFPLHdCQUF3QjtBQUFHO29EQUp2QyxRQUFRLFNBQUMsa0JBQ1I7TUFBWSxFQUFFLENBQUUsa0JBQWtCLENBQUUsa0JBQ3BDLE9BQU8sRUFBRSxDQUFFLGtCQUFrQixDQUFFLGVBQ2hDOzs7Ozs7Ozs7QUFyQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXhCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFOQSxBQUFBLEFBRkEsQUFBQSxBQVdBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFzQkEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgTmdNb2R1bGUsIE9uRGVzdHJveSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQW5ndWxhckZpcmVTdG9yYWdlIH0gZnJvbSAnLi4vc3RvcmFnZSc7XG5cbi8qKiB0byBiZSB1c2VkIHdpdGggaW4gY29tYmluYXRpb24gd2l0aCB8IGFzeW5jICovXG5AUGlwZSh7XG4gIG5hbWU6ICdnZXREb3dubG9hZFVSTCcsXG4gIHB1cmU6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBHZXREb3dubG9hZFVSTFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtLCBPbkRlc3Ryb3kge1xuXG4gIHByaXZhdGUgYXN5bmNQaXBlOiBBc3luY1BpcGU7XG4gIHByaXZhdGUgcGF0aDogc3RyaW5nO1xuICBwcml2YXRlIGRvd25sb2FkVXJsJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZTogQW5ndWxhckZpcmVTdG9yYWdlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgdGhpcy5hc3luY1BpcGUgPSBuZXcgQXN5bmNQaXBlKGNkcik7XG4gIH1cblxuICB0cmFuc2Zvcm0ocGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKHBhdGggIT09IHRoaXMucGF0aCkge1xuICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgIHRoaXMuZG93bmxvYWRVcmwkID0gdGhpcy5zdG9yYWdlLnJlZihwYXRoKS5nZXREb3dubG9hZFVSTCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hc3luY1BpcGUudHJhbnNmb3JtKHRoaXMuZG93bmxvYWRVcmwkKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuYXN5bmNQaXBlLm5nT25EZXN0cm95KCk7XG4gIH1cblxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFsgR2V0RG93bmxvYWRVUkxQaXBlIF0sXG4gIGV4cG9ydHM6IFsgR2V0RG93bmxvYWRVUkxQaXBlIF0sXG59KVxuZXhwb3J0IGNsYXNzIEdldERvd25sb2FkVVJMUGlwZU1vZHVsZSB7fVxuIl19