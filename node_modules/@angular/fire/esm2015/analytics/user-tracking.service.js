/**
 * @fileoverview added by tsickle
 * Generated from: user-tracking.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { AngularFireAnalytics } from './analytics';
import { AngularFireAuth } from '@angular/fire/auth';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/fire/auth';
export class UserTrackingService {
    // TODO a user properties injector
    /**
     * @param {?} analytics
     * @param {?} platformId
     * @param {?} auth
     * @param {?} zone
     */
    constructor(analytics, 
    // tslint:disable-next-line:ban-types
    platformId, auth, zone) {
        this.disposables = [];
        if (!isPlatformServer(platformId)) {
            /** @type {?} */
            let resolveInitialized;
            this.initialized = zone.runOutsideAngular((/**
             * @return {?}
             */
            () => new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            resolve => resolveInitialized = resolve))));
            this.disposables = [
                auth.authState.subscribe((/**
                 * @param {?} user
                 * @return {?}
                 */
                user => {
                    analytics.setUserId(user === null || user === void 0 ? void 0 : user.uid);
                    resolveInitialized();
                })),
                auth.credential.subscribe((/**
                 * @param {?} credential
                 * @return {?}
                 */
                credential => {
                    if (credential) {
                        /** @type {?} */
                        const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;
                        if (credential.additionalUserInfo.isNewUser) {
                            analytics.logEvent('sign_up', { method });
                        }
                        analytics.logEvent('login', { method });
                    }
                }))
            ];
        }
        else {
            this.initialized = Promise.resolve();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposables.forEach((/**
         * @param {?} it
         * @return {?}
         */
        it => it.unsubscribe()));
    }
}
UserTrackingService.ɵfac = function UserTrackingService_Factory(t) { return new (t || UserTrackingService)(ɵngcc0.ɵɵinject(AngularFireAnalytics), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(ɵngcc1.AngularFireAuth), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
UserTrackingService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: UserTrackingService, factory: UserTrackingService.ɵfac });
/** @nocollapse */
UserTrackingService.ctorParameters = () => [
    { type: AngularFireAnalytics },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AngularFireAuth },
    { type: NgZone }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(UserTrackingService, [{
        type: Injectable
    }], function () { return [{ type: AngularFireAnalytics }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc1.AngularFireAuth }, { type: ɵngcc0.NgZone }]; }, null); })();
if (false) {
    /** @type {?} */
    UserTrackingService.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    UserTrackingService.prototype.disposables;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci10cmFja2luZy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9hbmFseXRpY3MvdXNlci10cmFja2luZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFhLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7QUFJckQsTUFBTSxPQUFPLG1CQUFtQjtBQUFHO0FBRWxCO0FBQVE7QUFDRjtBQUVyQjtBQUF1QjtBQUNkO0FBQ1AsSUFERixZQUNFLFNBQStCO0FBQ2xDLElBQUcscUNBQXFDO0FBQ3pDLElBQXlCLFVBQWtCLEVBQ3ZDLElBQXFCLEVBQ3JCLElBQVk7QUFDZCxRQVRRLGdCQUFXLEdBQXdCLEVBQUUsQ0FBQztBQUNoRCxRQVVJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUN2QztBQUE2QixnQkFBbkIsa0JBQWtCO0FBQzVCLFlBQU0sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCO0FBQU07QUFBMkI7QUFBZ0IsWUFBaEQsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPO0FBQU07QUFBa0M7QUFDbEY7QUFDWCxZQUZzRCxPQUFPLENBQUMsRUFBRSxDQUFDLGtCQUFrQixHQUFHLE9BQU8sRUFBQyxFQUFDLENBQUM7QUFDNUcsWUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHO0FBQ3pCLGdCQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUztBQUFNO0FB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QUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXpDQSxBQUFBLEFBSkEsQUFBQSxBQWNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQWJBLEFBQUEsQUFGQSxBQUFBLEFBUUEsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgTmdab25lLCBPbkRlc3Ryb3ksIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmd1bGFyRmlyZUFuYWx5dGljcyB9IGZyb20gJy4vYW5hbHl0aWNzJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlQXV0aCB9IGZyb20gJ0Bhbmd1bGFyL2ZpcmUvYXV0aCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVzZXJUcmFja2luZ1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIGluaXRpYWxpemVkOiBQcm9taXNlPHZvaWQ+O1xuICBwcml2YXRlIGRpc3Bvc2FibGVzOiBBcnJheTxTdWJzY3JpcHRpb24+ID0gW107XG5cbiAgLy8gVE9ETyBhIHVzZXIgcHJvcGVydGllcyBpbmplY3RvclxuICBjb25zdHJ1Y3RvcihcbiAgICBhbmFseXRpY3M6IEFuZ3VsYXJGaXJlQW5hbHl0aWNzLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXNcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICAgYXV0aDogQW5ndWxhckZpcmVBdXRoLFxuICAgIHpvbmU6IE5nWm9uZSxcbiAgKSB7XG5cbiAgICBpZiAoIWlzUGxhdGZvcm1TZXJ2ZXIocGxhdGZvcm1JZCkpIHtcbiAgICAgIGxldCByZXNvbHZlSW5pdGlhbGl6ZWQ7XG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmVJbml0aWFsaXplZCA9IHJlc29sdmUpKTtcbiAgICAgIHRoaXMuZGlzcG9zYWJsZXMgPSBbXG4gICAgICAgICAgYXV0aC5hdXRoU3RhdGUuc3Vic2NyaWJlKHVzZXIgPT4ge1xuICAgICAgICAgICAgYW5hbHl0aWNzLnNldFVzZXJJZCh1c2VyPy51aWQpO1xuICAgICAgICAgICAgcmVzb2x2ZUluaXRpYWxpemVkKCk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgYXV0aC5jcmVkZW50aWFsLnN1YnNjcmliZShjcmVkZW50aWFsID0+IHtcbiAgICAgICAgICAgIGlmIChjcmVkZW50aWFsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IGNyZWRlbnRpYWwudXNlci5pc0Fub255bW91cyA/ICdhbm9ueW1vdXMnIDogY3JlZGVudGlhbC5hZGRpdGlvbmFsVXNlckluZm8ucHJvdmlkZXJJZDtcbiAgICAgICAgICAgICAgaWYgKGNyZWRlbnRpYWwuYWRkaXRpb25hbFVzZXJJbmZvLmlzTmV3VXNlcikge1xuICAgICAgICAgICAgICAgIGFuYWx5dGljcy5sb2dFdmVudCgnc2lnbl91cCcsIHsgbWV0aG9kIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFuYWx5dGljcy5sb2dFdmVudCgnbG9naW4nLCB7IG1ldGhvZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kaXNwb3NhYmxlcy5mb3JFYWNoKGl0ID0+IGl0LnVuc3Vic2NyaWJlKCkpO1xuICB9XG59XG4iXX0=