(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material/input'), require('@angular/material/icon'), require('@angular/material/button')) :
    typeof define === 'function' && define.amd ? define('angular-input-counter', ['exports', '@angular/core', '@angular/forms', '@angular/material/input', '@angular/material/icon', '@angular/material/button'], factory) :
    (global = global || self, factory(global['angular-input-counter'] = {}, global.ng.core, global.ng.forms, global.ng.material.input, global.ng.material.icon, global.ng.material.button));
}(this, function (exports, core, forms, input, icon, button) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var noop = (/**
     * @return {?}
     */
    function () {
    });
    var ɵ0 = noop;
    /** @type {?} */
    var CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef((/**
         * @return {?}
         */
        function () { return CounterComponent; })),
        multi: true
    };
    var CounterComponent = /** @class */ (function () {
        function CounterComponent() {
            this.min = 1;
            this.max = 10;
            this.step = 1;
            this.appearance = 'none';
            this.color = 'primary';
            //Placeholders for the callbacks which are later providesd
            //by the Control Value Accessor
            this.onTouchedCallback = noop;
            this.onChangeCallback = noop;
            this.counterValue = this.counterValue || this.min;
        }
        Object.defineProperty(CounterComponent.prototype, "counter", {
            get: /**
             * @return {?}
             */
            function () {
                return this.counterValue;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        CounterComponent.prototype.increment = /**
         * @return {?}
         */
        function () {
            if (this.counterValue < this.max) {
                this.counterValue = this.counterValue + this.step;
                this.onChangeCallback(this.counterValue);
            }
        };
        /**
         * @return {?}
         */
        CounterComponent.prototype.decrement = /**
         * @return {?}
         */
        function () {
            if (this.counterValue > this.min) {
                this.counterValue = this.counterValue - this.step;
                this.onChangeCallback(this.counterValue);
            }
        };
        Object.defineProperty(CounterComponent.prototype, "value", {
            //get accessor
            get: 
            //get accessor
            /**
             * @return {?}
             */
            function () {
                return this.counterValue;
            },
            //set accessor including call the onchange callback
            set: 
            //set accessor including call the onchange callback
            /**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (v !== this.counterValue) {
                    this.counterValue = v;
                    this.onChangeCallback(v);
                }
            },
            enumerable: true,
            configurable: true
        });
        ;
        //Set touched on blur
        //Set touched on blur
        /**
         * @return {?}
         */
        CounterComponent.prototype.onBlur = 
        //Set touched on blur
        /**
         * @return {?}
         */
        function () {
            this.onTouchedCallback();
        };
        //From ControlValueAccessor interface
        //From ControlValueAccessor interface
        /**
         * @param {?} value
         * @return {?}
         */
        CounterComponent.prototype.writeValue = 
        //From ControlValueAccessor interface
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== this.counterValue) {
                this.counterValue = value;
            }
        };
        //From ControlValueAccessor interface
        //From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        CounterComponent.prototype.registerOnChange = 
        //From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChangeCallback = fn;
        };
        //From ControlValueAccessor interface
        //From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        CounterComponent.prototype.registerOnTouched = 
        //From ControlValueAccessor interface
        /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouchedCallback = fn;
        };
        CounterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'angular-input-counter',
                        template: "<mat-form-field [appearance]=\"appearance\">\n  <button mat-mini-fab matPrefix [color]=\"color\" (click)=\"decrement()\" [disabled]=\"counterValue <= min\">\n    <mat-icon>remove</mat-icon>\n  </button>\n  <input matInput type=\"text\" [value]=\"counterValue\" [readonly]=\"readonly\" only-digits [(ngModel)]=\"value\" (blur)=\"onBlur()\">\n\n  <button mat-mini-fab matSuffix [color]=\"color\" (click)=\"increment()\" [disabled]=\"counterValue >= max\">\n    <mat-icon>add</mat-icon>\n  </button>\n</mat-form-field>\n",
                        providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                        styles: [":host ::ng-deep .mat-form-field-infix{width:100%;text-align:center}:host ::ng-deep .mat-mini-fab{width:32px;height:32px}:host ::ng-deep .mat-mini-fab .mat-button-wrapper{padding:3px}"]
                    }] }
        ];
        /** @nocollapse */
        CounterComponent.ctorParameters = function () { return []; };
        CounterComponent.propDecorators = {
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            step: [{ type: core.Input }],
            appearance: [{ type: core.Input }],
            color: [{ type: core.Input }],
            counterValue: [{ type: core.Input }],
            readonly: [{ type: core.Input }],
            counter: [{ type: core.Input }]
        };
        return CounterComponent;
    }());
    if (false) {
        /** @type {?} */
        CounterComponent.prototype.min;
        /** @type {?} */
        CounterComponent.prototype.max;
        /** @type {?} */
        CounterComponent.prototype.step;
        /** @type {?} */
        CounterComponent.prototype.appearance;
        /** @type {?} */
        CounterComponent.prototype.color;
        /** @type {?} */
        CounterComponent.prototype.counterValue;
        /** @type {?} */
        CounterComponent.prototype.readonly;
        /**
         * @type {?}
         * @private
         */
        CounterComponent.prototype.onTouchedCallback;
        /**
         * @type {?}
         * @private
         */
        CounterComponent.prototype.onChangeCallback;
        /* Skipping unhandled member: ;*/
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //only-digits
    var OnlyDigitsDirective = /** @class */ (function () {
        function OnlyDigitsDirective(el) {
            this.el = el;
            this.el.nativeElement.onkeypress = (/**
             * @param {?} evt
             * @return {?}
             */
            function (evt) {
                if (evt.which < 48 || evt.which > 57) {
                    evt.preventDefault();
                }
            });
        }
        OnlyDigitsDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[only-digits]'
                    },] }
        ];
        /** @nocollapse */
        OnlyDigitsDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        return OnlyDigitsDirective;
    }());
    if (false) {
        /** @type {?} */
        OnlyDigitsDirective.prototype.el;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AngularCounterModule = /** @class */ (function () {
        function AngularCounterModule() {
        }
        AngularCounterModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [CounterComponent, OnlyDigitsDirective],
                        imports: [
                            input.MatInputModule,
                            icon.MatIconModule,
                            button.MatButtonModule, forms.FormsModule
                        ],
                        exports: [CounterComponent]
                    },] }
        ];
        return AngularCounterModule;
    }());

    exports.AngularCounterModule = AngularCounterModule;
    exports.CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR;
    exports.CounterComponent = CounterComponent;
    exports.ɵa = OnlyDigitsDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular-input-counter.umd.js.map
