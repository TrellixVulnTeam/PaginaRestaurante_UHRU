{"version":3,"sources":["ng://angular-input-counter/lib/counter.component.ts","ng://angular-input-counter/lib/counter.directive.ts","ng://angular-input-counter/lib/counter.module.ts"],"names":["noop","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CounterComponent","multi","this","min","max","step","appearance","color","onTouchedCallback","onChangeCallback","counterValue","Object","defineProperty","prototype","increment","decrement","v","onBlur","writeValue","value","registerOnChange","fn","registerOnTouched","Component","args","selector","template","providers","Input","OnlyDigitsDirective","el","nativeElement","onkeypress","evt","which","preventDefault","Directive","ElementRef","AngularCounterModule","NgModule","declarations","imports","MatInputModule","MatIconModule","MatButtonModule","FormsModule","exports"],"mappings":"wlBAEMA,EAAI,aAEGC,EAA2C,CACtDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAU,WAAO,OAAAC,KAC9BC,OAAO,GAGTD,EAAA,WAmBE,SAAAA,IAZSE,KAAAC,IAAM,EACND,KAAAE,IAAM,GACNF,KAAAG,KAAO,EACPH,KAAAI,WAAa,OACbJ,KAAAK,MAAQ,UAKTL,KAAAM,kBAAgCd,EAChCQ,KAAAO,iBAAqCf,EAG3CQ,KAAKQ,aAAeR,KAAKQ,cAAgBR,KAAKC,IAwDlD,OArDEQ,OAAAC,eACIZ,EAAAa,UAAA,UAAO,KADX,WAEE,OAAOX,KAAKQ,8CAGdV,EAAAa,UAAAC,UAAA,WACKZ,KAAKQ,aAAeR,KAAKE,MAC1BF,KAAKQ,aAAeR,KAAKQ,aAAeR,KAAKG,KAC7CH,KAAKO,iBAAiBP,KAAKQ,gBAI/BV,EAAAa,UAAAE,UAAA,WACKb,KAAKQ,aAAeR,KAAKC,MAC1BD,KAAKQ,aAAeR,KAAKQ,aAAeR,KAAKG,KAC7CH,KAAKO,iBAAiBP,KAAKQ,gBAK/BC,OAAAC,eAAIZ,EAAAa,UAAA,QAAK,KAAT,WACE,OAAOX,KAAKQ,kBAId,SAAUM,GACJA,IAAMd,KAAKQ,eACbR,KAAKQ,aAAeM,EACpBd,KAAKO,iBAAiBO,qCAK1BhB,EAAAa,UAAAI,OAAA,WACEf,KAAKM,qBAIPR,EAAAa,UAAAK,WAAA,SAAWC,GACLA,IAAUjB,KAAKQ,eACjBR,KAAKQ,aAAeS,IAKxBnB,EAAAa,UAAAO,iBAAA,SAAiBC,GACfnB,KAAKO,iBAAmBY,GAI1BrB,EAAAa,UAAAS,kBAAA,SAAkBD,GAChBnB,KAAKM,kBAAoBa,uBA1E5BE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wBACVC,SAAA,gfAEAC,UAAW,CAAChC,4QAGXiC,EAAAA,mBACAA,EAAAA,oBACAA,EAAAA,0BACAA,EAAAA,qBACAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,uBAUAA,EAAAA,SAqDH5B,EA5EA,GCPA,IAAA6B,EAAA,WAIE,SAAAA,EAAmBC,GAAA5B,KAAA4B,GAAAA,EACjB5B,KAAK4B,GAAGC,cAAcC,WAAU,SAAIC,IAC9BA,EAAIC,MAAQ,IAAMD,EAAIC,MAAQ,KAChCD,EAAIE,kBAIZ,2BAXCC,EAAAA,UAASZ,KAAA,CAAC,CACTC,SAAU,6DAJQY,EAAAA,cAcpBR,EAXA,GCHA,IAAAS,EAAA,WAQA,SAAAA,KAUoC,2BAVnCC,EAAAA,SAAQf,KAAA,CAAC,CACRgB,aAAc,CAACxC,EAAkB6B,GACjCY,QAAS,CACPC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,gBAAgBC,EAAAA,aAGlBC,QAAS,CAAC9C,OAEwBsC,EAlBpC","sourcesContent":["import { Component, Input, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nconst noop = () => {\n};\nexport const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CounterComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'angular-input-counter',\n  templateUrl: 'counter.component.html',\n  styleUrls: ['counter.component.scss'],\n  providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class CounterComponent implements ControlValueAccessor {\n  @Input() min = 1;\n  @Input() max = 10;\n  @Input() step = 1;\n  @Input() appearance = 'none';\n  @Input() color = 'primary';\n  @Input() counterValue : number;\n  @Input() readonly : boolean;\n  //Placeholders for the callbacks which are later providesd\n  //by the Control Value Accessor\n  private onTouchedCallback: () => void = noop;\n  private onChangeCallback: (_: any) => void = noop;\n\n  constructor() {\n    this.counterValue = this.counterValue || this.min;\n  }\n\n  @Input()\n  get counter(){\n    return this.counterValue;\n  }\n\n  increment(){\n    if(this.counterValue < this.max) {\n      this.counterValue = this.counterValue + this.step\n      this.onChangeCallback(this.counterValue);\n    }\n  }\n\n  decrement(){\n    if(this.counterValue > this.min) {\n      this.counterValue = this.counterValue - this.step;\n      this.onChangeCallback(this.counterValue);\n    }\n  }\n\n  //get accessor\n  get value(): any {\n    return this.counterValue;\n  };\n\n  //set accessor including call the onchange callback\n  set value(v: any) {\n    if (v !== this.counterValue) {\n      this.counterValue = v;\n      this.onChangeCallback(v);\n    }\n  }\n\n  //Set touched on blur\n  onBlur() {\n    this.onTouchedCallback();\n  }\n\n  //From ControlValueAccessor interface\n  writeValue(value: any) {\n    if (value !== this.counterValue) {\n      this.counterValue = value;\n    }\n  }\n\n  //From ControlValueAccessor interface\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n  }\n\n  //From ControlValueAccessor interface\n  registerOnTouched(fn: any) {\n    this.onTouchedCallback = fn;\n  }\n}\n"," import {Directive, ElementRef, Input} from '@angular/core';\n\n//only-digits\n@Directive({\n  selector: '[only-digits]'\n})\nexport class OnlyDigitsDirective {\n  constructor(public el: ElementRef) {\n    this.el.nativeElement.onkeypress = (evt) => {\n      if (evt.which < 48 || evt.which > 57) {\n        evt.preventDefault();\n      }\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CounterComponent } from './counter.component';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {OnlyDigitsDirective} from './counter.directive';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [CounterComponent, OnlyDigitsDirective],\n  imports: [\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,FormsModule\n\n  ],\n  exports: [CounterComponent]\n})\nexport class AngularCounterModule { }\n"]}