/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
const noop = (/**
 * @return {?}
 */
() => {
});
const ɵ0 = noop;
/** @type {?} */
export const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => CounterComponent)),
    multi: true
};
export class CounterComponent {
    constructor() {
        this.min = 1;
        this.max = 10;
        this.step = 1;
        this.appearance = 'none';
        this.color = 'primary';
        //Placeholders for the callbacks which are later providesd
        //by the Control Value Accessor
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.counterValue = this.counterValue || this.min;
    }
    /**
     * @return {?}
     */
    get counter() {
        return this.counterValue;
    }
    /**
     * @return {?}
     */
    increment() {
        if (this.counterValue < this.max) {
            this.counterValue = this.counterValue + this.step;
            this.onChangeCallback(this.counterValue);
        }
    }
    /**
     * @return {?}
     */
    decrement() {
        if (this.counterValue > this.min) {
            this.counterValue = this.counterValue - this.step;
            this.onChangeCallback(this.counterValue);
        }
    }
    //get accessor
    /**
     * @return {?}
     */
    get value() {
        return this.counterValue;
    }
    ;
    //set accessor including call the onchange callback
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.counterValue) {
            this.counterValue = v;
            this.onChangeCallback(v);
        }
    }
    //Set touched on blur
    /**
     * @return {?}
     */
    onBlur() {
        this.onTouchedCallback();
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.counterValue) {
            this.counterValue = value;
        }
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
CounterComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-input-counter',
                template: "<mat-form-field [appearance]=\"appearance\">\n  <button mat-mini-fab matPrefix [color]=\"color\" (click)=\"decrement()\" [disabled]=\"counterValue <= min\">\n    <mat-icon>remove</mat-icon>\n  </button>\n  <input matInput type=\"text\" [value]=\"counterValue\" [readonly]=\"readonly\" only-digits [(ngModel)]=\"value\" (blur)=\"onBlur()\">\n\n  <button mat-mini-fab matSuffix [color]=\"color\" (click)=\"increment()\" [disabled]=\"counterValue >= max\">\n    <mat-icon>add</mat-icon>\n  </button>\n</mat-form-field>\n",
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                styles: [":host ::ng-deep .mat-form-field-infix{width:100%;text-align:center}:host ::ng-deep .mat-mini-fab{width:32px;height:32px}:host ::ng-deep .mat-mini-fab .mat-button-wrapper{padding:3px}"]
            }] }
];
/** @nocollapse */
CounterComponent.ctorParameters = () => [];
CounterComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    appearance: [{ type: Input }],
    color: [{ type: Input }],
    counterValue: [{ type: Input }],
    readonly: [{ type: Input }],
    counter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CounterComponent.prototype.min;
    /** @type {?} */
    CounterComponent.prototype.max;
    /** @type {?} */
    CounterComponent.prototype.step;
    /** @type {?} */
    CounterComponent.prototype.appearance;
    /** @type {?} */
    CounterComponent.prototype.color;
    /** @type {?} */
    CounterComponent.prototype.counterValue;
    /** @type {?} */
    CounterComponent.prototype.readonly;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onChangeCallback;
    /* Skipping unhandled member: ;*/
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWlucHV0LWNvdW50ZXIvIiwic291cmNlcyI6WyJsaWIvY291bnRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7O01BQ25FLElBQUk7OztBQUFHLEdBQUcsRUFBRTtBQUNsQixDQUFDLENBQUE7OztBQUNELE1BQU0sT0FBTyxtQ0FBbUMsR0FBUTtJQUN0RCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBQztJQUMvQyxLQUFLLEVBQUUsSUFBSTtDQUNaO0FBUUQsTUFBTSxPQUFPLGdCQUFnQjtJQWEzQjtRQVpTLFFBQUcsR0FBRyxDQUFDLENBQUM7UUFDUixRQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ1QsU0FBSSxHQUFHLENBQUMsQ0FBQztRQUNULGVBQVUsR0FBRyxNQUFNLENBQUM7UUFDcEIsVUFBSyxHQUFHLFNBQVMsQ0FBQzs7O1FBS25CLHNCQUFpQixHQUFlLElBQUksQ0FBQztRQUNyQyxxQkFBZ0IsR0FBcUIsSUFBSSxDQUFDO1FBR2hELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BELENBQUM7Ozs7SUFFRCxJQUNJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVELFNBQVM7UUFDUCxJQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtZQUNqRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQzs7OztJQUVELFNBQVM7UUFDUCxJQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNsRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQzs7Ozs7SUFHRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUFBLENBQUM7Ozs7OztJQUdGLElBQUksS0FBSyxDQUFDLENBQU07UUFDZCxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7Ozs7O0lBR0QsTUFBTTtRQUNKLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7OztJQUdELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7Ozs7SUFHRCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBR0QsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7OztZQTNFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsaWhCQUFxQztnQkFFckMsU0FBUyxFQUFFLENBQUMsbUNBQW1DLENBQUM7O2FBQ2pEOzs7OztrQkFFRSxLQUFLO2tCQUNMLEtBQUs7bUJBQ0wsS0FBSzt5QkFDTCxLQUFLO29CQUNMLEtBQUs7MkJBQ0wsS0FBSzt1QkFDTCxLQUFLO3NCQVVMLEtBQUs7Ozs7SUFoQk4sK0JBQWlCOztJQUNqQiwrQkFBa0I7O0lBQ2xCLGdDQUFrQjs7SUFDbEIsc0NBQTZCOztJQUM3QixpQ0FBMkI7O0lBQzNCLHdDQUErQjs7SUFDL0Isb0NBQTRCOzs7OztJQUc1Qiw2Q0FBNkM7Ozs7O0lBQzdDLDRDQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIGZvcndhcmRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmNvbnN0IG5vb3AgPSAoKSA9PiB7XG59O1xuZXhwb3J0IGNvbnN0IENVU1RPTV9JTlBVVF9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBhbnkgPSB7XG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDb3VudGVyQ29tcG9uZW50KSxcbiAgbXVsdGk6IHRydWVcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FuZ3VsYXItaW5wdXQtY291bnRlcicsXG4gIHRlbXBsYXRlVXJsOiAnY291bnRlci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydjb3VudGVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIHByb3ZpZGVyczogW0NVU1RPTV9JTlBVVF9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SXVxufSlcbmV4cG9ydCBjbGFzcyBDb3VudGVyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBASW5wdXQoKSBtaW4gPSAxO1xuICBASW5wdXQoKSBtYXggPSAxMDtcbiAgQElucHV0KCkgc3RlcCA9IDE7XG4gIEBJbnB1dCgpIGFwcGVhcmFuY2UgPSAnbm9uZSc7XG4gIEBJbnB1dCgpIGNvbG9yID0gJ3ByaW1hcnknO1xuICBASW5wdXQoKSBjb3VudGVyVmFsdWUgOiBudW1iZXI7XG4gIEBJbnB1dCgpIHJlYWRvbmx5IDogYm9vbGVhbjtcbiAgLy9QbGFjZWhvbGRlcnMgZm9yIHRoZSBjYWxsYmFja3Mgd2hpY2ggYXJlIGxhdGVyIHByb3ZpZGVzZFxuICAvL2J5IHRoZSBDb250cm9sIFZhbHVlIEFjY2Vzc29yXG4gIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBub29wO1xuICBwcml2YXRlIG9uQ2hhbmdlQ2FsbGJhY2s6IChfOiBhbnkpID0+IHZvaWQgPSBub29wO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY291bnRlclZhbHVlID0gdGhpcy5jb3VudGVyVmFsdWUgfHwgdGhpcy5taW47XG4gIH1cblxuICBASW5wdXQoKVxuICBnZXQgY291bnRlcigpe1xuICAgIHJldHVybiB0aGlzLmNvdW50ZXJWYWx1ZTtcbiAgfVxuXG4gIGluY3JlbWVudCgpe1xuICAgIGlmKHRoaXMuY291bnRlclZhbHVlIDwgdGhpcy5tYXgpIHtcbiAgICAgIHRoaXMuY291bnRlclZhbHVlID0gdGhpcy5jb3VudGVyVmFsdWUgKyB0aGlzLnN0ZXBcbiAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh0aGlzLmNvdW50ZXJWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZGVjcmVtZW50KCl7XG4gICAgaWYodGhpcy5jb3VudGVyVmFsdWUgPiB0aGlzLm1pbikge1xuICAgICAgdGhpcy5jb3VudGVyVmFsdWUgPSB0aGlzLmNvdW50ZXJWYWx1ZSAtIHRoaXMuc3RlcDtcbiAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh0aGlzLmNvdW50ZXJWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy9nZXQgYWNjZXNzb3JcbiAgZ2V0IHZhbHVlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMuY291bnRlclZhbHVlO1xuICB9O1xuXG4gIC8vc2V0IGFjY2Vzc29yIGluY2x1ZGluZyBjYWxsIHRoZSBvbmNoYW5nZSBjYWxsYmFja1xuICBzZXQgdmFsdWUodjogYW55KSB7XG4gICAgaWYgKHYgIT09IHRoaXMuY291bnRlclZhbHVlKSB7XG4gICAgICB0aGlzLmNvdW50ZXJWYWx1ZSA9IHY7XG4gICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sodik7XG4gICAgfVxuICB9XG5cbiAgLy9TZXQgdG91Y2hlZCBvbiBibHVyXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gIH1cblxuICAvL0Zyb20gQ29udHJvbFZhbHVlQWNjZXNzb3IgaW50ZXJmYWNlXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5jb3VudGVyVmFsdWUpIHtcbiAgICAgIHRoaXMuY291bnRlclZhbHVlID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgLy9Gcm9tIENvbnRyb2xWYWx1ZUFjY2Vzc29yIGludGVyZmFjZVxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpIHtcbiAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSBmbjtcbiAgfVxuXG4gIC8vRnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2VcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xuICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcbiAgfVxufVxuIl19