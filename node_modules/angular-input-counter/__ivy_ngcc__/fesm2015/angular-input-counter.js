import { forwardRef, Component, Input, Directive, ElementRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/form-field';
import * as ɵngcc2 from '@angular/material/button';
import * as ɵngcc3 from '@angular/material/icon';
import * as ɵngcc4 from '@angular/material/input';
import * as ɵngcc5 from '@angular/forms';
const noop = (/**
 * @return {?}
 */
() => {
});
const ɵ0 = noop;
/** @type {?} */
const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => CounterComponent)),
    multi: true
};
class CounterComponent {
    constructor() {
        this.min = 1;
        this.max = 10;
        this.step = 1;
        this.appearance = 'none';
        this.color = 'primary';
        //Placeholders for the callbacks which are later providesd
        //by the Control Value Accessor
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.counterValue = this.counterValue || this.min;
    }
    /**
     * @return {?}
     */
    get counter() {
        return this.counterValue;
    }
    /**
     * @return {?}
     */
    increment() {
        if (this.counterValue < this.max) {
            this.counterValue = this.counterValue + this.step;
            this.onChangeCallback(this.counterValue);
        }
    }
    /**
     * @return {?}
     */
    decrement() {
        if (this.counterValue > this.min) {
            this.counterValue = this.counterValue - this.step;
            this.onChangeCallback(this.counterValue);
        }
    }
    //get accessor
    /**
     * @return {?}
     */
    get value() {
        return this.counterValue;
    }
    ;
    //set accessor including call the onchange callback
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.counterValue) {
            this.counterValue = v;
            this.onChangeCallback(v);
        }
    }
    //Set touched on blur
    /**
     * @return {?}
     */
    onBlur() {
        this.onTouchedCallback();
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.counterValue) {
            this.counterValue = value;
        }
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
CounterComponent.ɵfac = function CounterComponent_Factory(t) { return new (t || CounterComponent)(); };
CounterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CounterComponent, selectors: [["angular-input-counter"]], inputs: { min: "min", max: "max", step: "step", appearance: "appearance", color: "color", counterValue: "counterValue", counter: "counter", readonly: "readonly" }, features: [ɵngcc0.ɵɵProvidersFeature([CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR])], decls: 8, vars: 8, consts: [[3, "appearance"], ["mat-mini-fab", "", "matPrefix", "", 3, "color", "disabled", "click"], ["matInput", "", "type", "text", "only-digits", "", 3, "value", "readonly", "ngModel", "ngModelChange", "blur"], ["mat-mini-fab", "", "matSuffix", "", 3, "color", "disabled", "click"]], template: function CounterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "mat-form-field", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵlistener("click", function CounterComponent_Template_button_click_1_listener() { return ctx.decrement(); });
        ɵngcc0.ɵɵelementStart(2, "mat-icon");
        ɵngcc0.ɵɵtext(3, "remove");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "input", 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function CounterComponent_Template_input_ngModelChange_4_listener($event) { return ctx.value = $event; })("blur", function CounterComponent_Template_input_blur_4_listener() { return ctx.onBlur(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 3);
        ɵngcc0.ɵɵlistener("click", function CounterComponent_Template_button_click_5_listener() { return ctx.increment(); });
        ɵngcc0.ɵɵelementStart(6, "mat-icon");
        ɵngcc0.ɵɵtext(7, "add");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("appearance", ctx.appearance);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("color", ctx.color)("disabled", ctx.counterValue <= ctx.min);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("value", ctx.counterValue)("readonly", ctx.readonly)("ngModel", ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("color", ctx.color)("disabled", ctx.counterValue >= ctx.max);
    } }, directives: function () { return [ɵngcc1.MatFormField, ɵngcc2.MatButton, ɵngcc1.MatPrefix, ɵngcc3.MatIcon, ɵngcc4.MatInput, ɵngcc5.DefaultValueAccessor, OnlyDigitsDirective, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, ɵngcc1.MatSuffix]; }, styles: ["[_nghost-%COMP%]     .mat-form-field-infix{width:100%;text-align:center}[_nghost-%COMP%]     .mat-mini-fab{width:32px;height:32px}[_nghost-%COMP%]     .mat-mini-fab .mat-button-wrapper{padding:3px}"] });
/** @nocollapse */
CounterComponent.ctorParameters = () => [];
CounterComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    appearance: [{ type: Input }],
    color: [{ type: Input }],
    counterValue: [{ type: Input }],
    readonly: [{ type: Input }],
    counter: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CounterComponent, [{
        type: Component,
        args: [{
                selector: 'angular-input-counter',
                template: "<mat-form-field [appearance]=\"appearance\">\n  <button mat-mini-fab matPrefix [color]=\"color\" (click)=\"decrement()\" [disabled]=\"counterValue <= min\">\n    <mat-icon>remove</mat-icon>\n  </button>\n  <input matInput type=\"text\" [value]=\"counterValue\" [readonly]=\"readonly\" only-digits [(ngModel)]=\"value\" (blur)=\"onBlur()\">\n\n  <button mat-mini-fab matSuffix [color]=\"color\" (click)=\"increment()\" [disabled]=\"counterValue >= max\">\n    <mat-icon>add</mat-icon>\n  </button>\n</mat-form-field>\n",
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                styles: [":host ::ng-deep .mat-form-field-infix{width:100%;text-align:center}:host ::ng-deep .mat-mini-fab{width:32px;height:32px}:host ::ng-deep .mat-mini-fab .mat-button-wrapper{padding:3px}"]
            }]
    }], function () { return []; }, { min: [{
            type: Input
        }], max: [{
            type: Input
        }], step: [{
            type: Input
        }], appearance: [{
            type: Input
        }], color: [{
            type: Input
        }], counterValue: [{
            type: Input
        }], counter: [{
            type: Input
        }], readonly: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    CounterComponent.prototype.min;
    /** @type {?} */
    CounterComponent.prototype.max;
    /** @type {?} */
    CounterComponent.prototype.step;
    /** @type {?} */
    CounterComponent.prototype.appearance;
    /** @type {?} */
    CounterComponent.prototype.color;
    /** @type {?} */
    CounterComponent.prototype.counterValue;
    /** @type {?} */
    CounterComponent.prototype.readonly;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onChangeCallback;
    /* Skipping unhandled member: ;*/
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//only-digits
class OnlyDigitsDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.el.nativeElement.onkeypress = (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            if (evt.which < 48 || evt.which > 57) {
                evt.preventDefault();
            }
        });
    }
}
OnlyDigitsDirective.ɵfac = function OnlyDigitsDirective_Factory(t) { return new (t || OnlyDigitsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
OnlyDigitsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OnlyDigitsDirective, selectors: [["", "only-digits", ""]] });
/** @nocollapse */
OnlyDigitsDirective.ctorParameters = () => [
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OnlyDigitsDirective, [{
        type: Directive,
        args: [{
                selector: '[only-digits]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
if (false) {
    /** @type {?} */
    OnlyDigitsDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularCounterModule {
}
AngularCounterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularCounterModule });
AngularCounterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularCounterModule_Factory(t) { return new (t || AngularCounterModule)(); }, imports: [[
            MatInputModule,
            MatIconModule,
            MatButtonModule, FormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularCounterModule, { declarations: function () { return [CounterComponent,
        OnlyDigitsDirective]; }, imports: function () { return [MatInputModule,
        MatIconModule,
        MatButtonModule, FormsModule]; }, exports: function () { return [CounterComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularCounterModule, [{
        type: NgModule,
        args: [{
                declarations: [CounterComponent, OnlyDigitsDirective],
                imports: [
                    MatInputModule,
                    MatIconModule,
                    MatButtonModule, FormsModule
                ],
                exports: [CounterComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularCounterModule, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, CounterComponent, OnlyDigitsDirective as ɵa };

//# sourceMappingURL=angular-input-counter.js.map