import { forwardRef, Component, Input, Directive, ElementRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const noop = (/**
 * @return {?}
 */
() => {
});
const ɵ0 = noop;
/** @type {?} */
const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => CounterComponent)),
    multi: true
};
class CounterComponent {
    constructor() {
        this.min = 1;
        this.max = 10;
        this.step = 1;
        this.appearance = 'none';
        this.color = 'primary';
        //Placeholders for the callbacks which are later providesd
        //by the Control Value Accessor
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.counterValue = this.counterValue || this.min;
    }
    /**
     * @return {?}
     */
    get counter() {
        return this.counterValue;
    }
    /**
     * @return {?}
     */
    increment() {
        if (this.counterValue < this.max) {
            this.counterValue = this.counterValue + this.step;
            this.onChangeCallback(this.counterValue);
        }
    }
    /**
     * @return {?}
     */
    decrement() {
        if (this.counterValue > this.min) {
            this.counterValue = this.counterValue - this.step;
            this.onChangeCallback(this.counterValue);
        }
    }
    //get accessor
    /**
     * @return {?}
     */
    get value() {
        return this.counterValue;
    }
    ;
    //set accessor including call the onchange callback
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.counterValue) {
            this.counterValue = v;
            this.onChangeCallback(v);
        }
    }
    //Set touched on blur
    /**
     * @return {?}
     */
    onBlur() {
        this.onTouchedCallback();
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.counterValue) {
            this.counterValue = value;
        }
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
CounterComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-input-counter',
                template: "<mat-form-field [appearance]=\"appearance\">\n  <button mat-mini-fab matPrefix [color]=\"color\" (click)=\"decrement()\" [disabled]=\"counterValue <= min\">\n    <mat-icon>remove</mat-icon>\n  </button>\n  <input matInput type=\"text\" [value]=\"counterValue\" [readonly]=\"readonly\" only-digits [(ngModel)]=\"value\" (blur)=\"onBlur()\">\n\n  <button mat-mini-fab matSuffix [color]=\"color\" (click)=\"increment()\" [disabled]=\"counterValue >= max\">\n    <mat-icon>add</mat-icon>\n  </button>\n</mat-form-field>\n",
                providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                styles: [":host ::ng-deep .mat-form-field-infix{width:100%;text-align:center}:host ::ng-deep .mat-mini-fab{width:32px;height:32px}:host ::ng-deep .mat-mini-fab .mat-button-wrapper{padding:3px}"]
            }] }
];
/** @nocollapse */
CounterComponent.ctorParameters = () => [];
CounterComponent.propDecorators = {
    min: [{ type: Input }],
    max: [{ type: Input }],
    step: [{ type: Input }],
    appearance: [{ type: Input }],
    color: [{ type: Input }],
    counterValue: [{ type: Input }],
    readonly: [{ type: Input }],
    counter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CounterComponent.prototype.min;
    /** @type {?} */
    CounterComponent.prototype.max;
    /** @type {?} */
    CounterComponent.prototype.step;
    /** @type {?} */
    CounterComponent.prototype.appearance;
    /** @type {?} */
    CounterComponent.prototype.color;
    /** @type {?} */
    CounterComponent.prototype.counterValue;
    /** @type {?} */
    CounterComponent.prototype.readonly;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onChangeCallback;
    /* Skipping unhandled member: ;*/
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//only-digits
class OnlyDigitsDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.el.nativeElement.onkeypress = (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            if (evt.which < 48 || evt.which > 57) {
                evt.preventDefault();
            }
        });
    }
}
OnlyDigitsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[only-digits]'
            },] }
];
/** @nocollapse */
OnlyDigitsDirective.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /** @type {?} */
    OnlyDigitsDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularCounterModule {
}
AngularCounterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [CounterComponent, OnlyDigitsDirective],
                imports: [
                    MatInputModule,
                    MatIconModule,
                    MatButtonModule, FormsModule
                ],
                exports: [CounterComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularCounterModule, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, CounterComponent, OnlyDigitsDirective as ɵa };
//# sourceMappingURL=angular-input-counter.js.map
