import { forwardRef, Component, Input, Directive, ElementRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var noop = (/**
 * @return {?}
 */
function () {
});
var ɵ0 = noop;
/** @type {?} */
var CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return CounterComponent; })),
    multi: true
};
var CounterComponent = /** @class */ (function () {
    function CounterComponent() {
        this.min = 1;
        this.max = 10;
        this.step = 1;
        this.appearance = 'none';
        this.color = 'primary';
        //Placeholders for the callbacks which are later providesd
        //by the Control Value Accessor
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.counterValue = this.counterValue || this.min;
    }
    Object.defineProperty(CounterComponent.prototype, "counter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.counterValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CounterComponent.prototype.increment = /**
     * @return {?}
     */
    function () {
        if (this.counterValue < this.max) {
            this.counterValue = this.counterValue + this.step;
            this.onChangeCallback(this.counterValue);
        }
    };
    /**
     * @return {?}
     */
    CounterComponent.prototype.decrement = /**
     * @return {?}
     */
    function () {
        if (this.counterValue > this.min) {
            this.counterValue = this.counterValue - this.step;
            this.onChangeCallback(this.counterValue);
        }
    };
    Object.defineProperty(CounterComponent.prototype, "value", {
        //get accessor
        get: 
        //get accessor
        /**
         * @return {?}
         */
        function () {
            return this.counterValue;
        },
        //set accessor including call the onchange callback
        set: 
        //set accessor including call the onchange callback
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v !== this.counterValue) {
                this.counterValue = v;
                this.onChangeCallback(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    //Set touched on blur
    //Set touched on blur
    /**
     * @return {?}
     */
    CounterComponent.prototype.onBlur = 
    //Set touched on blur
    /**
     * @return {?}
     */
    function () {
        this.onTouchedCallback();
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    CounterComponent.prototype.writeValue = 
    //From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.counterValue) {
            this.counterValue = value;
        }
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    CounterComponent.prototype.registerOnChange = 
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    //From ControlValueAccessor interface
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    CounterComponent.prototype.registerOnTouched = 
    //From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    CounterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'angular-input-counter',
                    template: "<mat-form-field [appearance]=\"appearance\">\n  <button mat-mini-fab matPrefix [color]=\"color\" (click)=\"decrement()\" [disabled]=\"counterValue <= min\">\n    <mat-icon>remove</mat-icon>\n  </button>\n  <input matInput type=\"text\" [value]=\"counterValue\" [readonly]=\"readonly\" only-digits [(ngModel)]=\"value\" (blur)=\"onBlur()\">\n\n  <button mat-mini-fab matSuffix [color]=\"color\" (click)=\"increment()\" [disabled]=\"counterValue >= max\">\n    <mat-icon>add</mat-icon>\n  </button>\n</mat-form-field>\n",
                    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR],
                    styles: [":host ::ng-deep .mat-form-field-infix{width:100%;text-align:center}:host ::ng-deep .mat-mini-fab{width:32px;height:32px}:host ::ng-deep .mat-mini-fab .mat-button-wrapper{padding:3px}"]
                }] }
    ];
    /** @nocollapse */
    CounterComponent.ctorParameters = function () { return []; };
    CounterComponent.propDecorators = {
        min: [{ type: Input }],
        max: [{ type: Input }],
        step: [{ type: Input }],
        appearance: [{ type: Input }],
        color: [{ type: Input }],
        counterValue: [{ type: Input }],
        readonly: [{ type: Input }],
        counter: [{ type: Input }]
    };
    return CounterComponent;
}());
if (false) {
    /** @type {?} */
    CounterComponent.prototype.min;
    /** @type {?} */
    CounterComponent.prototype.max;
    /** @type {?} */
    CounterComponent.prototype.step;
    /** @type {?} */
    CounterComponent.prototype.appearance;
    /** @type {?} */
    CounterComponent.prototype.color;
    /** @type {?} */
    CounterComponent.prototype.counterValue;
    /** @type {?} */
    CounterComponent.prototype.readonly;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    CounterComponent.prototype.onChangeCallback;
    /* Skipping unhandled member: ;*/
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
//only-digits
var OnlyDigitsDirective = /** @class */ (function () {
    function OnlyDigitsDirective(el) {
        this.el = el;
        this.el.nativeElement.onkeypress = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (evt.which < 48 || evt.which > 57) {
                evt.preventDefault();
            }
        });
    }
    OnlyDigitsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[only-digits]'
                },] }
    ];
    /** @nocollapse */
    OnlyDigitsDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return OnlyDigitsDirective;
}());
if (false) {
    /** @type {?} */
    OnlyDigitsDirective.prototype.el;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AngularCounterModule = /** @class */ (function () {
    function AngularCounterModule() {
    }
    AngularCounterModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [CounterComponent, OnlyDigitsDirective],
                    imports: [
                        MatInputModule,
                        MatIconModule,
                        MatButtonModule, FormsModule
                    ],
                    exports: [CounterComponent]
                },] }
    ];
    return AngularCounterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularCounterModule, CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR, CounterComponent, OnlyDigitsDirective as ɵa };
//# sourceMappingURL=angular-input-counter.js.map
